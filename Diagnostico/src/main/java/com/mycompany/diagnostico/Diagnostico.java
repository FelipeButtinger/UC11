/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.diagnostico;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author felip
 */
public class Diagnostico extends javax.swing.JFrame {
private List<String> sintomasDoenca = new ArrayList<>();
Set<String> doencasSet = new HashSet<>();
    /**
     * Creates new form Diagnostico
     */
    public Diagnostico() {
        initComponents();
        try {

        Connection conexao = conectarBanco();   
        String sql = "SELECT nome FROM sintomas";       
        PreparedStatement pstmt = conexao.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();
        
        List<String> sintomas = new ArrayList<>();
        while (rs.next()) {//pega elemento por elemento da table
            String nomeSintoma = rs.getString("nome");
                sintomas.add(nomeSintoma);//Adicionando em uma array para usos futuros
                cbbx1.addItem(nomeSintoma);//Adicionando na comboBox
            
        }
         pstmt.close();
        conexao.close();
        
        
    } catch (SQLException ex) {
        Logger.getLogger(TelaCadastro.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbbx1 = new javax.swing.JComboBox<>();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnDiagnostico = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbbx1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbbx1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbx1ActionPerformed(evt);
            }
        });

        btnAdicionar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemover.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        JTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sintomas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(JTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Selecione os sintomas que o/a aflinge");

        btnDiagnostico.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        btnDiagnostico.setText("Diagnóstico");
        btnDiagnostico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiagnosticoActionPerformed(evt);
            }
        });

        btnLimpar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        jButton1.setText("voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnLimpar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRemover))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(97, 97, 97)
                                    .addComponent(cbbx1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnAdicionar)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(btnDiagnostico))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbbx1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdicionar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover)
                    .addComponent(btnLimpar))
                .addGap(28, 28, 28)
                .addComponent(btnDiagnostico)
                .addGap(39, 39, 39))
        );

        btnVer.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnVer.setText("Ver");
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doença/Infecção", "Risco"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel2.setText("Selecione a doença e clique em ver para ver mais sobre ela");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnVer)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(99, 99, 99))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
 int selectedRow = JTable.getSelectedRow();
 
        
        String valorLinha = JTable.getValueAt(selectedRow, 0).toString();//aqui eu capturo o valor da linha a ser removida para tirar da array que adiciona no banco de dados
        
    if (selectedRow != -1) {
        
        
        boolean removed = sintomasDoenca.remove(valorLinha);//Aqui é removido da arraylist
        
        DefaultTableModel model = (DefaultTableModel) JTable.getModel();
        model.removeRow(selectedRow);
        
       
        JOptionPane.showMessageDialog(this, "Linha deletada com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    } else {
        
        JOptionPane.showMessageDialog(this, "Por favor, selecione uma linha para deletar.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }        
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        Object selecionado = cbbx1.getSelectedItem();
        String selecionadoConvertido = selecionado.toString();
        DefaultTableModel model = (DefaultTableModel) JTable.getModel();

        verificarCopias(selecionado);
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void cbbx1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbx1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbx1ActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
         sintomasDoenca.clear();
    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
    model.setRowCount(0);
    cbbx1.setSelectedIndex(-1);
    JOptionPane.showMessageDialog(this, "Todos os campos foram limpos.", "Limpeza", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnDiagnosticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiagnosticoActionPerformed
        // TODO add your handling code here:
       // private List<String> sintomasDoenca = new ArrayList<>(); usa esta array
         
       // Usa a array sintomasDoenca para verificar quais doenças podem ter risco
    try {
        Connection conexao = conectarBanco();   
        String sql = "SELECT doenca.nome " +
                     "FROM doencas doenca " +
                     "JOIN sintomas_doencas sintomasDoencas ON doenca.nome = sintomasDoencas.id_doenca " +
                     "JOIN sintomas sintoma ON sintomasDoencas.id_sintoma = sintoma.nome " +
                     "WHERE sintoma.nome = ?;"; 

        PreparedStatement pstmt = conexao.prepareStatement(sql);

        // Opera a ação para cada sintoma da array
        for (String sintoma : sintomasDoenca) {
            pstmt.setString(1, sintoma);
            ResultSet rs = pstmt.executeQuery();
            
            // Adiciona as doenças encontradas ao Set
            while (rs.next()) {
                String nomeDoenca = rs.getString("nome");
                doencasSet.add(nomeDoenca); // Um HashSet não permite duplicatas
            }
            rs.close();
        }

        pstmt.close();
        conexao.close();

        // Transforma o Set em ArrayList para futuras utilizações
        List<String> doencas = new ArrayList<>(doencasSet);

        // Limpa a tabela antes de adicionar novas linhas
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);

        // Adiciona cada doença e seu risco à tabela
        for (String doenca : doencas) {
            String risco = calcularRiscos(doenca);
            tableModel.addRow(new Object[]{doenca, risco});
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(Diagnostico.class.getName()).log(Level.SEVERE, null, ex);
    } 
       
    }//GEN-LAST:event_btnDiagnosticoActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    
    if (selectedRow != -1) {
        String doencaSelecionada = (String) jTable1.getValueAt(selectedRow, 0);
        
        // Cria a instância da nova tela (Testes)
        InfoDoencas novaTela = new InfoDoencas();
        
        // Passa a string para a nova tela
        novaTela.receberString(doencaSelecionada);
        
        // Torna a nova tela visível
        novaTela.setVisible(true);
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, selecione uma doença.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnVerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //volta ao menu
         TelaMenu voltar = new TelaMenu();
        
        voltar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    public String calcularRiscos(String doenca){
         try {
        Connection conexao = conectarBanco();   
        String sql = "SELECT sintoma.nome " +
                     "FROM sintomas sintoma " +
                     "JOIN sintomas_doencas sintomasDoencas ON sintoma.nome = sintomasDoencas.id_sintoma " +
                     "JOIN doencas doenca ON sintomasDoencas.id_doenca = doenca.nome " +
                     "WHERE doenca.nome = ?;";       
        PreparedStatement pstmt = conexao.prepareStatement(sql);
        pstmt.setString(1, doenca);
        
        ResultSet rs = pstmt.executeQuery();
        
        List<String> sintomas = new ArrayList<>();
        while (rs.next()) {
            String nomeSintoma = rs.getString("nome");
            sintomas.add(nomeSintoma);
        }
        
        pstmt.close();
        conexao.close();

        // Comparar com os sintomas do usuário
        
        int matchCount = 0;
        
        for (String sintoma : sintomas) {
            if (sintomasDoenca.contains(sintoma)) {
                matchCount++;
            }
        }
        
        int totalSintomas = sintomas.size();
        if (totalSintomas == 0) {
            return "Nenhum risco";
        }
        
        double matchPercentage = (double) matchCount / totalSintomas * 100;
        
        if (matchPercentage == 0) {
            return "Nenhum risco";
        } else if (matchPercentage > 0 && matchPercentage <= 25) {
            return "Baixo risco";
        } else if (matchPercentage > 25 && matchPercentage <= 50) {
            return "há certo Risco";
        } else {
            return "Alto risco";
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(TelaCadastro.class.getName()).log(Level.SEVERE, null, ex);
        return "Erro ao calcular riscos";
    }    }
    public void verificarCopias(Object nome){
         int rows = JTable.getRowCount();
    
    // Iterar pelas linhas da tabela
    for(int i = 0; i < rows; i++){
        // Obter o valor da célula na coluna 0 da linha atual
        Object valorCelula = JTable.getValueAt(i, 0);
        
        // Comparar o valor atual com o nome recebido
        if(nome.equals(valorCelula)){
            JOptionPane.showMessageDialog(null,
  "Sintoma já adicionado na sua lista de sintomas.",
  "Warning",
  JOptionPane.WARNING_MESSAGE);
            return; // Se já existe, não precisa adicionar novamente
        }
    }
    
    // Se chegou aqui, significa que o sintoma não está na tabela
    DefaultTableModel model = (DefaultTableModel) JTable.getModel();
    model.addRow(new Object[]{nome}); // Adicionar o novo sintoma na tabela
    
    sintomasDoenca.add(nome.toString()); // Adicionar o novo sintoma na lista
        System.out.println(sintomasDoenca);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diagnostico().setVisible(true);
            }
        });
    }
    private Connection conectarBanco() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/diagnosticoJava";
        String usuario = "root";
        String senha = "root";
        return DriverManager.getConnection(url,usuario,senha);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTable;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnDiagnostico;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnVer;
    private javax.swing.JComboBox<String> cbbx1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
